// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String         @id @default(uuid())
    username       String
    email          String?        @unique
    emailVerified  DateTime?
    isAnonymous    Boolean        @default(false)
    isAdmin        Boolean        @default(false)
    isSuspended    Boolean        @default(false)
    suspendedAt    DateTime?
    lastActiveAt   DateTime?
    lastSignedInAt DateTime?
    deletedAt      DateTime?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    profile        UserProfile?
    refreshTokens  RefreshToken[]
    schedules      Schedule[]

    @@map(name: "users")
}

model UserProfile {
    id        String   @id @default(uuid())
    userId    String   @unique
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "user_profiles")
}

model RefreshToken {
    id        String    @id @default(uuid())
    isRevoked Boolean   @default(false)
    userId    String
    expiresAt DateTime
    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id])

    @@map(name: "refresh_tokens")
}

model UserCount {
    id Int @id @default(autoincrement())

    @@map(name: "user_counts")
}

model Schedule {
    id                 Int                @id @default(autoincrement())
    userId             String
    title              String
    content            String?
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    user               User               @relation(fields: [userId], references: [id])
    places             Place[]
    scheduleCategories ScheduleCategory[]

    @@map(name: "schedules")
}

model ScheduleCategory {
    id             Int       @id @default(autoincrement())
    fk_schedule_id Int?
    fk_category_id Int?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    schedule       Schedule? @relation(fields: [fk_schedule_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
    category       Category? @relation(fields: [fk_category_id], references: [id], onDelete: Cascade, onUpdate: Restrict)

    @@unique([fk_schedule_id, fk_category_id])
    @@map(name: "schedule_categories")
}

model Category {
    id                 Int                @id @default(autoincrement())
    name               String             @unique
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    scheduleCategories ScheduleCategory[]

    @@map(name: "categories")
}

model Place {
    id          Int           @id @default(autoincrement())
    name        String
    address     String
    latitude    Float
    longitude   Float
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    scheduleId  Int?
    schedule    Schedule?     @relation(fields: [scheduleId], references: [id])
    placeTags   PlaceTags[]
    placeImages PlaceImages[]

    @@map(name: "places")
}

model PlaceTags {
    id          Int      @id @default(autoincrement())
    fk_place_id Int?
    fk_tag_id   Int?
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    place       Place?   @relation(fields: [fk_place_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
    tag         Tag?     @relation(fields: [fk_tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict)

    @@unique([fk_place_id, fk_tag_id])
    @@map("place_tags")
}

model Tag {
    id        Int         @id @default(autoincrement())
    name      String      @unique
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    placeTags PlaceTags[]

    @@map(name: "tags")
}

model PlaceImages {
    id          Int      @id @default(autoincrement())
    fk_place_id Int?
    fk_image_id Int?
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    place       Place?   @relation(fields: [fk_place_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
    image       Image?   @relation(fields: [fk_image_id], references: [id], onDelete: Cascade, onUpdate: Restrict)

    @@unique([fk_place_id, fk_image_id])
    @@map(name: "place_images")
}

model Image {
    id          Int           @id @default(autoincrement())
    cfId        String        @unique
    url         String
    metadata    Bytes?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    PlaceImages PlaceImages[]

    @@map(name: "images")
}
